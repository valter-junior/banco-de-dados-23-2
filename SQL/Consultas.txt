/*
CONSULTAS DO BANCO DE DADOS
*/

-- GROUP BY/ HAVING (+ JOIN)
SELECT A.NOME, COUNT(*)
FROM AUTOR A
INNER JOIN ESCREVE E ON A.MAT = E.MAT
GROUP BY A.NOME
HAVING COUNT(*) > 1;

-- JUNÇÃO INTERNA
SELECT A.NOME, L.TITULO
FROM AUTOR A
INNER JOIN ESCREVE E ON A.MAT = E.MAT
INNER JOIN LIVRO L ON E.ISBN = L.ISBN;

-- JUNÇÃO EXTERNA
SELECT A.NOME, L.TITULO
FROM LIVRO L
LEFT OUTER JOIN ESCREVE E ON  L.ISBN = E.ISBN
LEFT OUTER JOIN AUTOR A ON E.MAT = A.MAT ;

-- -- SEMI JUNÇÃO
 SELECT L.TITULO
 FROM LIVRO L 
 WHERE EXISTS (
     SELECT *
     FROM COMPRA C 
     WHERE C.ISBN = L.ISBN AND
	COD_DESC IS NOT NULL
);

-- USANDO “IN”
SELECT L.TITULO
FROM LIVRO L
WHERE L.ISBN IN (
    SELECT C.ISBN 
    FROM COMPRA C 
    WHERE C.COD_DESC IS NOT NULL
);

--ANTI-JUNÇÃO
SELECT DISTINCT G.GENERO
FROM GENERO G
WHERE NOT EXISTS (
    SELECT C.ISBN
    FROM COMPRA C 
    WHERE C.COD_DESC IS NOT NULL AND
    C.ISBN = G.ISBN
    );

-- SUBCONSULTA ESCALAR
SELECT COUNT(*) AS VENDA
FROM COMPRA 
GROUP BY CPF_FUNC
HAVING COUNT(*) = (
    SELECT MIN(VENDA)
    FROM (
        SELECT COUNT(*) AS VENDA, CPF_FUNC
        FROM COMPRA 
        GROUP BY CPF_FUNC
    )
);

-- SUBCONSULTA LINHA
SELECT COUNT(*) AS VENDA, F.NOME
FROM COMPRA C INNER JOIN FUNCIONARIO F
    ON C.CPF_FUNC = F.CPF
GROUP BY C.CPF_FUNC, F.NOME
HAVING COUNT(*) = (
    SELECT MIN(VENDA)
    FROM (
        SELECT COUNT(*) AS VENDA, CPF_FUNC
        FROM COMPRA 
        GROUP BY CPF_FUNC
    )
);

-- SUBCONSULTA TABELA
SELECT L.TITULO
FROM LIVRO L
WHERE L.ISBN IN (
    SELECT E.ISBN 
    FROM ESCREVE E 
    INNER JOIN AUTOR A ON E.MAT = A.MAT
    WHERE A.NACIONALIDADE = 'Brasileira'
);

-- OPERAÇÃO DE CONJUNTO (UNION)
SELECT NOME, CPF AS "CPF/CNPJ"
FROM PESSOAFISICA
UNION
SELECT RAZAO_SOCIAL, CNPJ 
FROM PESSOAJURIDICA;

-- PROCEDURE - CONTAR COMPRAS POR CLIENTE
CREATE OR REPLACE PROCEDURE contar_compras_por_cliente(
    id_cliente_param IN VARCHAR2,
    total_compras OUT INT)
AS
BEGIN
    SELECT COUNT(*)
    INTO total_compras
    FROM COMPRA
    WHERE ID_CLIENTE = id_cliente_param;
END;


-- Function com SQL Embutido Consultar os n autores com livros mais vendidos 
-- o parametro é o top_n onde pode ser escolhido a quantidade de autores a ser premiado

CREATE FUNCTION premiar_autores(top_n INT) RETURNS TABLE (nome_autor VARCHAR(100), total_vendas INT) AS $$
BEGIN
    RETURN QUERY
    SELECT A.NOME, COUNT(*) AS total_vendas
    FROM AUTOR A
    INNER JOIN ESCREVE E ON A.MAT = E.MAT
    INNER JOIN LIVRO L ON E.ISBN = L.ISBN
    INNER JOIN COMPRA C ON L.ISBN = C.ISBN
    GROUP BY A.NOME
    ORDER BY total_vendas DESC
    LIMIT top_n;
END;

-- Função com SQL Embutido para criar um livro e inserir um genero:
CREATE OR REPLACE PROCEDURE adicionarLivro(
    p_ISBN IN VARCHAR2,
    p_TITULO IN VARCHAR2,
    p_GENERO IN VARCHAR2)
IS
BEGIN
    -- Adiciona o livro à tabela LIVRO
    INSERT INTO LIVRO (ISBN, TITULO)
    VALUES (p_ISBN, p_TITULO);
    -- Adiciona o gênero à tabela GENERO
    INSERT INTO GENERO (ISBN, GENERO)
    VALUES (p_ISBN, p_GENERO);
    -- Para garantir que as mudanças sejam salvas
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        -- Tratamento de erros, se necessário
        ROLLBACK; -- Desfaz as mudanças em caso de erro
        RAISE; -- Propaga o erro para o chamador
END adicionarLivro;
/
BEGIN
    adicionarLivro('1234567890123', 'Título do Livro', 'Ficção Científica');
END;
/
Consultar os livros escritos por autores brasileiros pelo genero:
-- Seleciona ISBNs de livros do gênero 'Romance'
SELECT L.ISBN
FROM LIVRO L
JOIN GENERO G ON L.ISBN = G.ISBN
WHERE G.GENERO = 'Romance'
INTERSECT
-- Seleciona ISBNs de livros escritos por autores brasileiros
SELECT E.ISBN
FROM ESCREVE E
JOIN AUTOR A ON E.MAT = A.MAT
WHERE A.NACIONALIDADE = 'Brasileira';

